#include <TChain.h>
#include <TFile.h>
#include <TString.h>
#include <TH1.h>
#include <TGraphAsymmErrors.h>
#include <TCanvas.h>
#include <TLegend.h>
#include <TPaveText.h>
#include <TTree.h>
#include <TLorentzVector.h>
#include <TMath.h>

#include <vector>
#include <iostream>
#include <iomanip>
#include <TROOT.h>

#include "TCut.h"

bool isInEcalCrack(Float_t eta) 
{
  eta = fabs(eta);
  return (eta < 0.018 ||
	  (eta>0.423 && eta<0.461) ||
	  (eta>0.770 && eta<0.806) ||
	  (eta>1.127 && eta<1.163) ||
	  (eta>1.460 && eta<1.558));
}

TH1* getHistogram(TFile* inputFile, const TString& dqmDirectory, const TString& meName)
{  
  TString histogramName = dqmDirectory;
  if ( !histogramName.EndsWith("/") ) histogramName.Append("/");
  histogramName.Append(meName);
  std::cout << "histogramName = " << histogramName.Data() << std::endl; 

  TH1* histogram = (TH1*)inputFile->Get(histogramName.Data());
  std::cout << "histogram = " << histogram << std::endl; 

  if ( !histogram->GetSumw2N()     ) histogram->Sumw2();
  if (  histogram->Integral() > 0. ) histogram->Scale(1./histogram->Integral());

  return histogram;
}

TGraphAsymmErrors* makeGraph(TH1* histogramNumerator, TH1* histogramDenominator)
{
  TGraphAsymmErrors* graph = new TGraphAsymmErrors();
  graph->Divide(histogramNumerator, histogramDenominator);
  return graph;
}

struct plotEntryType
{
  plotEntryType(const TString& name)
    : name_(name),
      graphTauPt_(0),
      graphTauEta_(0),
      graphTauPhi_(0),
      graphNumVertices_(0),
      graphUnbinned_(0)
  {
    numeratorTauPt_         = bookHistogram("numeratorTauPt",         name, 20,      0.,         100.);
    numeratorTauEta_        = bookHistogram("numeratorTauEta",        name, 230,     -2.3,         +2.3);
    numeratorTauPhi_        = bookHistogram("numeratorTauPhi",        name, 155, -TMath::Pi(), +TMath::Pi());
    numeratorNumVertices_   = bookHistogram("numeratorNumVertices",   name, 35,     -0.5,        +34.5);
    numeratorUnbinned_      = bookHistogram("numeratorUnbinned",      name,  1,     -0.5,         +0.5);
    denominatorTauPt_       = bookHistogram("denominatorTauPt",       name, 20,      0.,         100.);
    denominatorTauEta_      = bookHistogram("denominatorTauEta",      name, 230,     -2.3,         +2.3);
    denominatorTauPhi_      = bookHistogram("denominatorTauPhi",      name, 155, -TMath::Pi(), +TMath::Pi());
    denominatorNumVertices_ = bookHistogram("denominatorNumVertices", name, 35,     -0.5,        +34.5);
    denominatorUnbinned_    = bookHistogram("denominatorUnbinned",    name,  1,     -0.5,         +0.5);
  }
  ~plotEntryType()
  {
    delete numeratorTauPt_;
    delete numeratorTauEta_;
    delete numeratorTauPhi_;
    delete numeratorNumVertices_;
    delete numeratorUnbinned_;
    delete denominatorTauPt_;
    delete denominatorTauEta_;
    delete denominatorTauPhi_;
    delete denominatorNumVertices_;
    delete denominatorUnbinned_;
    delete graphTauPt_;
    delete graphTauEta_;
    delete graphTauPhi_;
    delete graphNumVertices_;
    delete graphUnbinned_;
  }
  TH1* bookHistogram(const TString& name1, const TString& name2, Int_t numBinsX, Float_t xMin, Float_t xMax)
  {
    TString histogramName = Form("%s_%s", name1.Data(), name2.Data());
    TH1* histogram = new TH1F(histogramName.Data(), histogramName.Data(), numBinsX, xMin, xMax);
    return histogram;
  }
  void fillHistograms(bool passesNumerator, bool passesDenominator, 
		      Float_t tauPt, Float_t tauEta, Float_t tauPhi,
		      Float_t numVertices,
		      Float_t evtWeight)
  {
    if ( passesDenominator ) {
      denominatorTauPt_->Fill(tauPt, evtWeight);
      denominatorTauEta_->Fill(tauEta, evtWeight);
      denominatorTauPhi_->Fill(tauPhi, evtWeight);
      denominatorNumVertices_->Fill(numVertices, evtWeight);
      denominatorUnbinned_->Fill(0., evtWeight);
      if ( passesNumerator ) {
	numeratorTauPt_->Fill(tauPt, evtWeight);
	numeratorTauEta_->Fill(tauEta, evtWeight);
	numeratorTauPhi_->Fill(tauPhi, evtWeight);
	numeratorNumVertices_->Fill(numVertices, evtWeight);
	numeratorUnbinned_->Fill(0., evtWeight);
      }
    }
  }
  void makeGraphs()
  {    
    graphTauPt_       = makeGraph(numeratorTauPt_,       denominatorTauPt_);
    graphTauEta_      = makeGraph(numeratorTauEta_,      denominatorTauEta_);
    graphTauPhi_      = makeGraph(numeratorTauPhi_,      denominatorTauPhi_);
    graphNumVertices_ = makeGraph(numeratorNumVertices_, denominatorNumVertices_);    
    graphUnbinned_    = makeGraph(numeratorUnbinned_,    denominatorUnbinned_); 
    std::cout << "<makeGraphs>:" << std::endl;
    Double_t x, y;
    graphUnbinned_->GetPoint(0, x, y);
    std::cout << " name = " << name_.Data() << ": numerator = " << numeratorUnbinned_->Integral() << "," 
	      << " denominator = " << denominatorUnbinned_->Integral() << " --> efficiency/fake-rate = " << y << std::endl;
  }
  TString name_;
  TH1* numeratorTauPt_;
  TH1* numeratorTauEta_;
  TH1* numeratorTauPhi_;
  TH1* numeratorNumVertices_;
  TH1* numeratorUnbinned_;
  TH1* denominatorTauPt_;
  TH1* denominatorTauEta_;
  TH1* denominatorTauPhi_;
  TH1* denominatorNumVertices_;
  TH1* denominatorUnbinned_;
  TGraphAsymmErrors* graphTauPt_;
  TGraphAsymmErrors* graphTauEta_;
  TGraphAsymmErrors* graphTauPhi_;
  TGraphAsymmErrors* graphNumVertices_;
  TGraphAsymmErrors* graphUnbinned_;
};

void showGraphs(double canvasSizeX, double canvasSizeY,
                TGraph* graph1, const std::string& legendEntry1,
                TGraph* graph2, const std::string& legendEntry2,
                TGraph* graph3, const std::string& legendEntry3,
                TGraph* graph4, const std::string& legendEntry4,
                double legendTextSize, double legendPosX, double legendPosY, double legendSizeX, double legendSizeY, 
                std::vector<std::string>& labelTextLines, double labelTextSize,
                double labelPosX, double labelPosY, double labelSizeX, double labelSizeY,
                double xMin, double xMax, const std::string& xAxisTitle, double xAxisOffset,
                bool useLogScale, double yMin, double yMax, const std::string& yAxisTitle, double yAxisOffset,
                const std::string& outputFileName)
{
  TCanvas* canvas = new TCanvas("canvas", "canvas", canvasSizeX, canvasSizeY);
  canvas->SetFillColor(10);
  canvas->SetBorderSize(2);
  
  canvas->SetLeftMargin(0.14);
  canvas->SetBottomMargin(0.12);

  canvas->SetLogy(useLogScale);

  TH1* dummyHistogram = new TH1D("dummyHistogram", "dummyHistogram", 100, xMin, xMax);
  dummyHistogram->SetTitle("");
  dummyHistogram->SetStats(false);
  dummyHistogram->SetMinimum(yMin);
  dummyHistogram->SetMaximum(yMax);

  TAxis* xAxis = dummyHistogram->GetXaxis();
  xAxis->SetTitle(xAxisTitle.data());
  xAxis->SetTitleOffset(xAxisOffset);

  TAxis* yAxis = dummyHistogram->GetYaxis();
  yAxis->SetTitle(yAxisTitle.data());
  yAxis->SetTitleOffset(yAxisOffset);

  dummyHistogram->Draw("axis");

  int colors[4] = { 1, 2, 3, 4 };
  int markerStyles[4] = { 20, 21, 22, 23 };

  graph1->SetLineColor(colors[0]);
  graph1->SetMarkerColor(colors[0]);
  graph1->SetMarkerStyle(markerStyles[0]);
  graph1->Draw("p");

  if ( graph2 ) {
    graph2->SetLineColor(colors[1]);
    graph2->SetMarkerColor(colors[1]);
    graph2->SetMarkerStyle(markerStyles[1]);
    graph2->Draw("p");
  }
  
  if ( graph3 ) {
    graph3->SetLineColor(colors[2]);
    graph3->SetMarkerColor(colors[2]);
    graph3->SetMarkerStyle(markerStyles[2]);
    graph3->Draw("p");
  }

  if ( graph4 ) {
    graph4->SetLineColor(colors[3]);
    graph4->SetMarkerColor(colors[3]);
    graph4->SetMarkerStyle(markerStyles[3]);
    graph4->Draw("p");
  }
  
  TLegend* legend = new TLegend(legendPosX, legendPosY, legendPosX + legendSizeX, legendPosY + legendSizeY, "", "brNDC"); 
  legend->SetBorderSize(0);
  legend->SetFillColor(0);
  legend->SetTextSize(legendTextSize);
  legend->AddEntry(graph1, legendEntry1.data(), "l");
  if ( graph2 ) legend->AddEntry(graph2, legendEntry2.data(), "l");
  if ( graph3 ) legend->AddEntry(graph3, legendEntry3.data(), "l");
  if ( graph4 ) legend->AddEntry(graph4, legendEntry4.data(), "l");
  legend->Draw();

  TPaveText* label = new TPaveText(labelPosX, labelPosY, labelPosX + labelSizeX, labelPosY + labelSizeY, "brNDC");
  for ( std::vector<std::string>::const_iterator labelTextLine = labelTextLines.begin();
        labelTextLine != labelTextLines.end(); ++labelTextLine ) {
    label->AddText(labelTextLine->data());
  }
  label->SetFillColor(10);
  label->SetBorderSize(0);
  label->SetTextColor(1);
  label->SetTextAlign(12);
  label->SetTextSize(labelTextSize);
  label->Draw();

  TPaveText* label_cms = new TPaveText(0.14, 0.905, 0.88, 0.965, "brNDC");
  label_cms->AddText("CMS Simulation 2012, #sqrt{s} = 8 TeV");
  label_cms->SetFillColor(10);
  label_cms->SetBorderSize(0);
  label_cms->SetTextColor(1);
  label_cms->SetTextAlign(12);
  label_cms->SetTextSize(0.045);
  label_cms->Draw();

  canvas->Update();
  std::string outputFileName_plot = "plots/makeTauIdEffPlots/";
  size_t idx = outputFileName.find_last_of('.');
  outputFileName_plot.append(std::string(outputFileName, 0, idx));
  if ( idx != std::string::npos ) canvas->Print(std::string(outputFileName_plot).append(std::string(outputFileName, idx)).data());
  canvas->Print(std::string(outputFileName_plot).append(".root").data());
  canvas->Print(std::string(outputFileName_plot).append(".png").data());
  canvas->Print(std::string(outputFileName_plot).append(".pdf").data());
  canvas->Print(std::string(outputFileName_plot).append(".eps").data());
  
  delete dummyHistogram;
  delete label;
  delete legend;
  delete canvas;  
}

void showGraphs(double canvasSizeX, double canvasSizeY,
		plotEntryType* plots1, const std::string& legendEntry1,
		plotEntryType* plots2, const std::string& legendEntry2,
		plotEntryType* plots3, const std::string& legendEntry3,
		plotEntryType* plots4, const std::string& legendEntry4,
		double legendTextSize, double legendPosX, double legendPosY, double legendSizeX, double legendSizeY, 
                const std::string& labelTextLine, double labelTextSize,
                double labelPosX, double labelPosY, double labelSizeX, double labelSizeY,
                bool useLogScale, double yMin, double yMax, const std::string& yAxisTitle, double yAxisOffset,
                const std::string& outputFileName)
{
  size_t idx = outputFileName.find_last_of('.');
  std::string outputFileName_base = std::string(outputFileName, 0, idx);

  std::vector<std::string> labelTextLines;  
  labelTextLines.push_back(labelTextLine);

  std::string outputFileName_TauPt = std::string(outputFileName_base).append("_Pt");
  TGraph* graph1_TauPt = ( plots1 ) ? plots1->graphTauPt_ : 0;
  TGraph* graph2_TauPt = ( plots2 ) ? plots2->graphTauPt_ : 0;
  TGraph* graph3_TauPt = ( plots3 ) ? plots3->graphTauPt_ : 0;
  TGraph* graph4_TauPt = ( plots4 ) ? plots4->graphTauPt_ : 0;
  showGraphs(canvasSizeX, canvasSizeY,
	     graph1_TauPt, legendEntry1,
             graph2_TauPt, legendEntry2,
             graph3_TauPt, legendEntry3,
             graph4_TauPt, legendEntry4,
             legendTextSize, legendPosX, legendPosY, legendSizeX, legendSizeY, 
             labelTextLines, labelTextSize,
	     labelPosX, labelPosY, labelSizeX, labelSizeY,
             0., 100., "P_{T}^{#tauJet} / GeV", 1.3,
	     useLogScale, yMin, yMax, yAxisTitle, yAxisOffset,
             outputFileName_TauPt);

  std::string outputFileName_TauEta = std::string(outputFileName_base).append("_Eta");
  TGraph* graph1_TauEta = ( plots1 ) ? plots1->graphTauEta_ : 0;
  TGraph* graph2_TauEta = ( plots2 ) ? plots2->graphTauEta_ : 0;
  TGraph* graph3_TauEta = ( plots3 ) ? plots3->graphTauEta_ : 0;
  TGraph* graph4_TauEta = ( plots4 ) ? plots4->graphTauEta_ : 0;
  showGraphs(canvasSizeX, canvasSizeY,
	     graph1_TauEta, legendEntry1,
             graph2_TauEta, legendEntry2,
             graph3_TauEta, legendEntry3,
             graph4_TauEta, legendEntry4,
             legendTextSize, legendPosX, legendPosY, legendSizeX, legendSizeY, 
             labelTextLines, labelTextSize,
	     labelPosX, labelPosY, labelSizeX, labelSizeY,
             -2.3, +2.3, "#eta_{#tauJet}", 1.3,
	     useLogScale, yMin, yMax, yAxisTitle, yAxisOffset,
             outputFileName_TauEta);

  std::string outputFileName_TauPhi = std::string(outputFileName_base).append("_Phi");
  TGraph* graph1_TauPhi = ( plots1 ) ? plots1->graphTauPhi_ : 0;
  TGraph* graph2_TauPhi = ( plots2 ) ? plots2->graphTauPhi_ : 0;
  TGraph* graph3_TauPhi = ( plots3 ) ? plots3->graphTauPhi_ : 0;
  TGraph* graph4_TauPhi = ( plots4 ) ? plots4->graphTauPhi_ : 0;
  showGraphs(canvasSizeX, canvasSizeY,
	     graph1_TauPhi, legendEntry1,
             graph2_TauPhi, legendEntry2,
             graph3_TauPhi, legendEntry3,
             graph4_TauPhi, legendEntry4,
             legendTextSize, legendPosX, legendPosY, legendSizeX, legendSizeY, 
             labelTextLines, labelTextSize,
	     labelPosX, labelPosY, labelSizeX, labelSizeY,
             -TMath::Pi(), +TMath::Pi(), "#phi_{#tauJet} / Rad", 1.3,
	     useLogScale, yMin, yMax, yAxisTitle, yAxisOffset,
             outputFileName_TauPhi);

  std::string outputFileName_NumVertices = std::string(outputFileName_base).append("_NumVertices");
  TGraph* graph1_NumVertices = ( plots1 ) ? plots1->graphNumVertices_ : 0;
  TGraph* graph2_NumVertices = ( plots2 ) ? plots2->graphNumVertices_ : 0;
  TGraph* graph3_NumVertices = ( plots3 ) ? plots3->graphNumVertices_ : 0;
  TGraph* graph4_NumVertices = ( plots4 ) ? plots4->graphNumVertices_ : 0;
  showGraphs(canvasSizeX, canvasSizeY,
	     graph1_NumVertices, legendEntry1,
             graph2_NumVertices, legendEntry2,
             graph3_NumVertices, legendEntry3,
             graph4_NumVertices, legendEntry4,
             legendTextSize, legendPosX, legendPosY, legendSizeX, legendSizeY, 
             labelTextLines, labelTextSize,
	     labelPosX, labelPosY, labelSizeX, labelSizeY,
             -0.5, 34.5, "Num. reconstructed Vertices", 1.3,
	     useLogScale, yMin, yMax, yAxisTitle, yAxisOffset,
             outputFileName_NumVertices);
}

void makeTauIdEffPlots2()
{
  gROOT->SetBatch(true);
// //   TString inputFileName = "/data_CMS/cms/ivo/PfTauIDEff/V11/pfTauIdEffNtuple2_PFTauIdEff-V11-DYJetsToLL-madgraph-DR53X-Summer12.root";
// //   TString inputFileName = "/data_CMS/cms/ivo/PfTauIDEff/V11/pfTauIdEffNtuple2_PFTauIdEff-V11-H125-DR53X-Summer12.root";
// //   TString inputFileName = "/data_CMS/cms/ivo/PfTauIDEff/V13/pfTauIdEffNtuple2_PFTauIdEff-V13DeadEcalTer-DYJetsToLL-madgraph-DR53X-Summer12.root";
// //   TString inputFileName = "/data_CMS/cms/ivo/PfTauIDEff/V13/pfTauIdEffNtuple2_PFTauIdEff-V13DeadEcal-H125-DR53X-Summer12.root";
// //   TString inputFileName = "/data_CMS/cms/ivo/PfTauIDEff/V13/pfTauIdEffNtuple2_PFTauIdEff-V13DeadEcal-VBFH125-DR53X-Summer12.root";
// //    TString inputFileName = "/data2/veelken/CMSSW_5_3_x/Ntuples/pfTauIdEffNtuples/user/veelken/CMSSW_5_3_x/Ntuples/DYJetsToLL_M-50_TuneZ2Star_8TeV-madgraph-tarball/pfTauIdEffNtuple2_2013Jan29_all.root";
//   TString inputFileName = "/data_CMS/cms/ivo/PfTauIDEff/V13/pfTauIdEffNtuple2_PFTauIdEff-V13VTight-DYJetsToLL-madgraph-DR53X-Summer12.root";
//   TFile* inputFile = TFile::Open(inputFileName.Data());
//   if ( !inputFile ) {
//     std::cerr << "Failed to open input file = " << inputFileName.Data() << " !!" << std::endl;
//     assert(0);
//   }

//   int maxEvents =-1;

//   TString treeName = "pfTauIdEffNtuple2Producer/pfTauIdEffNtuple";
//   TTree* tree = dynamic_cast<TTree*>(inputFile->Get(treeName.Data()));
//   if ( !tree ) {
//     std::cerr << "Failed to find tree = " << treeName.Data() << " in input file = " << inputFileName.Data() << " !!" << std::endl;
//     assert(0);
//   }

  int maxEvents =-1;

  TChain *tree = new TChain("pfTauIdEffNtuple2Producer/pfTauIdEffNtuple");
  TString pathToFile = "/data_CMS/cms/ivo/AntiEMVANewTraining/PFTauIDEff/";
  tree->Add(pathToFile+"/pfTauIdEffNtuple2*.root");

  Float_t recTauEn, recTauPx, recTauPy, recTauPz;
  Float_t recTauDecayMode;
  Float_t leadPFCandEn, leadPFCandPx, leadPFCandPy, leadPFCandPz;
  Float_t leadPFChargedHadrCandEn, leadPFChargedHadrCandPx, leadPFChargedHadrCandPy, leadPFChargedHadrCandPz;
  Float_t genTauEn, genTauPx, genTauPy, genTauPz;
  Float_t genTauDecayMode;
  Float_t genTauMatch, genTauDeltaR;
  Float_t genElectronEn, genElectronPx, genElectronPy, genElectronPz;
  Float_t genElectronMatch, genElectronDeltaR;
  Float_t genMuonEn, genMuonPx, genMuonPy, genMuonPz;
  Float_t genMuonMatch, genMuonDeltaR;
  Float_t numVertices;
  Float_t evtWeight, evtWeight_dummy;
  Float_t decayModeFinding;
  Float_t byVLooseCombinedIsolationDeltaBetaCorr;
  Float_t byLooseCombinedIsolationDeltaBetaCorr;
  Float_t byMediumCombinedIsolationDeltaBetaCorr;
  Float_t byTightCombinedIsolationDeltaBetaCorr;
  Float_t byLooseCombinedIsolationDeltaBetaCorr3Hits;
  Float_t byLooseIsolationMVA;
  Float_t byMediumIsolationMVA;
  Float_t byTightIsolationMVA;
  Float_t againstElectronLoose;
  Float_t againstElectronMedium;
  Float_t againstElectronTight;
//   Float_t againstElectronMVA;
//   Float_t againstElectronMVA2raw;
//   Float_t againstElectronVLooseMVA2;
//   Float_t againstElectronLooseMVA2;
//   Float_t againstElectronMediumMVA2;
//   Float_t againstElectronTightMVA2;
  Float_t againstElectronMVA3raw;
  Float_t againstElectronLooseMVA3;
  Float_t againstElectronMediumMVA3;
  Float_t againstElectronTightMVA3;
  Float_t againstElectronVTightMVA3;
  Float_t againstElectronNewMVA3raw;
  Float_t againstElectronLooseNewMVA3;
  Float_t againstElectronMediumNewMVA3;
  Float_t againstElectronTightNewMVA3;
  Float_t againstElectronVTightNewMVA3;
  Float_t againstElectronDeadECAL;
  Float_t againstMuonLoose;
  Float_t againstMuonMedium;
  Float_t againstMuonTight;
  Float_t ElectronVetoMatch;

  tree->SetBranchAddress("recTauEn", &recTauEn);
  tree->SetBranchAddress("recTauPx", &recTauPx);
  tree->SetBranchAddress("recTauPy", &recTauPy);
  tree->SetBranchAddress("recTauPz", &recTauPz);
  tree->SetBranchAddress("recTauDecayMode", &recTauDecayMode);
  tree->SetBranchAddress("leadPFCandEn", &leadPFCandEn);
  tree->SetBranchAddress("leadPFCandPx", &leadPFCandPx);
  tree->SetBranchAddress("leadPFCandPy", &leadPFCandPy);
  tree->SetBranchAddress("leadPFCandPz", &leadPFCandPz);
  tree->SetBranchAddress("leadPFChargedHadrCandEn", &leadPFChargedHadrCandEn);
  tree->SetBranchAddress("leadPFChargedHadrCandPx", &leadPFChargedHadrCandPx); 
  tree->SetBranchAddress("leadPFChargedHadrCandPy", &leadPFChargedHadrCandPy);
  tree->SetBranchAddress("leadPFChargedHadrCandPz", &leadPFChargedHadrCandPz);
  tree->SetBranchAddress("genTauEn", &genTauEn);
  tree->SetBranchAddress("genTauPx", &genTauPx);
  tree->SetBranchAddress("genTauPy", &genTauPy);
  tree->SetBranchAddress("genTauPz", &genTauPz);
  tree->SetBranchAddress("genTauDecayMode", &genTauDecayMode);
  tree->SetBranchAddress("genTauMatch", &genTauMatch);
  tree->SetBranchAddress("genTauDeltaR", &genTauDeltaR);
  tree->SetBranchAddress("genElectronEn", &genElectronEn);
  tree->SetBranchAddress("genElectronPx", &genElectronPx);
  tree->SetBranchAddress("genElectronPy", &genElectronPy);
  tree->SetBranchAddress("genElectronPz", &genElectronPz);
  tree->SetBranchAddress("genElectronMatch", &genElectronMatch);
  tree->SetBranchAddress("genElectronDeltaR", &genElectronDeltaR);
  tree->SetBranchAddress("genMuonEn", &genMuonEn);
  tree->SetBranchAddress("genMuonPx", &genMuonPx);
  tree->SetBranchAddress("genMuonPy", &genMuonPy);
  tree->SetBranchAddress("genMuonPz", &genMuonPz);
  tree->SetBranchAddress("genMuonMatch", &genMuonMatch);
  tree->SetBranchAddress("genMuonDeltaR", &genMuonDeltaR);
  tree->SetBranchAddress("numVertices", &numVertices);
  tree->SetBranchAddress("evtWeight", &evtWeight);
  tree->SetBranchAddress("decayModeFinding", &decayModeFinding);
  tree->SetBranchAddress("byVLooseCombinedIsolationDeltaBetaCorr", &byVLooseCombinedIsolationDeltaBetaCorr);
  tree->SetBranchAddress("byLooseCombinedIsolationDeltaBetaCorr", &byLooseCombinedIsolationDeltaBetaCorr);
  tree->SetBranchAddress("byMediumCombinedIsolationDeltaBetaCorr", &byMediumCombinedIsolationDeltaBetaCorr);
  tree->SetBranchAddress("byTightCombinedIsolationDeltaBetaCorr", &byTightCombinedIsolationDeltaBetaCorr);
  tree->SetBranchAddress("byLooseCombinedIsolationDeltaBetaCorr3Hits", &byLooseCombinedIsolationDeltaBetaCorr3Hits);
  tree->SetBranchAddress("byLooseIsolationMVA", &byLooseIsolationMVA);
  tree->SetBranchAddress("byMediumIsolationMVA", &byMediumIsolationMVA);
  tree->SetBranchAddress("byTightIsolationMVA", &byTightIsolationMVA);
  tree->SetBranchAddress("againstElectronLoose", &againstElectronLoose);
  tree->SetBranchAddress("againstElectronMedium", &againstElectronMedium);
  tree->SetBranchAddress("againstElectronTight", &againstElectronTight);
 tree->SetBranchAddress("againstElectronMVA3raw", &againstElectronMVA3raw);
  tree->SetBranchAddress("againstElectronLooseMVA3", &againstElectronLooseMVA3);  
  tree->SetBranchAddress("againstElectronMediumMVA3", &againstElectronMediumMVA3);
  tree->SetBranchAddress("againstElectronTightMVA3", &againstElectronTightMVA3);
  tree->SetBranchAddress("againstElectronVTightMVA3", &againstElectronVTightMVA3);
  tree->SetBranchAddress("againstElectronNewMVA3raw", &againstElectronNewMVA3raw);
  tree->SetBranchAddress("againstElectronLooseNewMVA3", &againstElectronLooseNewMVA3);  
  tree->SetBranchAddress("againstElectronMediumNewMVA3", &againstElectronMediumNewMVA3);
  tree->SetBranchAddress("againstElectronTightNewMVA3", &againstElectronTightNewMVA3);
  tree->SetBranchAddress("againstElectronVTightNewMVA3", &againstElectronVTightNewMVA3);
  tree->SetBranchAddress("againstElectronDeadECAL", &againstElectronDeadECAL);
  tree->SetBranchAddress("againstMuonLoose", &againstMuonLoose);
  tree->SetBranchAddress("againstMuonMedium", &againstMuonMedium);
  tree->SetBranchAddress("againstMuonTight", &againstMuonTight);
  tree->SetBranchAddress("ElectronVetoMatch", &ElectronVetoMatch);

  plotEntryType* plotsTau_againstMuonLoose           = new plotEntryType("tau_againstMuonLoose");
  plotEntryType* plotsTau_againstMuonMedium          = new plotEntryType("tau_againstMuonMedium");
  plotEntryType* plotsTau_againstMuonTight           = new plotEntryType("tau_againstMuonTight");

  plotEntryType* plotsTau_againstElectronLoose           = new plotEntryType("tau_againstElectronLoose");
  plotEntryType* plotsTau_againstElectronMedium          = new plotEntryType("tau_againstElectronMedium");
  plotEntryType* plotsTau_againstElectronTight           = new plotEntryType("tau_againstElectronTight");
  plotEntryType* plotsTau_againstElectronLooseMVA3       = new plotEntryType("tau_againstElectronLooseMVA3");
  plotEntryType* plotsTau_againstElectronMediumMVA3      = new plotEntryType("tau_againstElectronMediumMVA3");
  plotEntryType* plotsTau_againstElectronTightMVA3       = new plotEntryType("tau_againstElectronTightMVA3");
  plotEntryType* plotsTau_againstElectronVTightMVA3      = new plotEntryType("tau_againstElectronVTightMVA3");
  plotEntryType* plotsTau_againstElectronLooseNewMVA3       = new plotEntryType("tau_againstElectronLooseNewMVA3");
  plotEntryType* plotsTau_againstElectronMediumNewMVA3      = new plotEntryType("tau_againstElectronMediumNewMVA3");
  plotEntryType* plotsTau_againstElectronTightNewMVA3       = new plotEntryType("tau_againstElectronTightNewMVA3");
  plotEntryType* plotsTau_againstElectronVTightNewMVA3      = new plotEntryType("tau_againstElectronVTightNewMVA3");

  plotEntryType* plotsTau_byLooseCombinedIsolation       = new plotEntryType("tau_byLooseCombinedIsolation");
  plotEntryType* plotsTau_byMediumCombinedIsolation      = new plotEntryType("tau_byMediumCombinedIsolation");
  plotEntryType* plotsTau_byTightCombinedIsolation       = new plotEntryType("tau_byTightCombinedIsolation");
  plotEntryType* plotsTau_byLooseIsolationMVA            = new plotEntryType("tau_byLooseIsolationMVA");
  plotEntryType* plotsTau_byMediumIsolationMVA           = new plotEntryType("tau_byMediumIsolationMVA");
  plotEntryType* plotsTau_byTightIsolationMVA            = new plotEntryType("tau_byTightIsolationMVA");

  plotEntryType* plotsMuon_againstMuonLoose      = new plotEntryType("mu_againstMuonLoose");
  plotEntryType* plotsMuon_againstMuonMedium     = new plotEntryType("mu_againstMuonMedium");
  plotEntryType* plotsMuon_againstMuonTight      = new plotEntryType("mu_againstMuonTight");

  plotEntryType* plotsElectron_againstElectronLoose      = new plotEntryType("e_againstElectronLoose");
  plotEntryType* plotsElectron_againstElectronMedium     = new plotEntryType("e_againstElectronMedium");
  plotEntryType* plotsElectron_againstElectronTight      = new plotEntryType("e_againstElectronTight");

  plotEntryType* plotsElectron_againstElectronLooseMVA3  = new plotEntryType("e_againstElectronLooseMVA3");  
  plotEntryType* plotsElectron_againstElectronMediumMVA3 = new plotEntryType("e_againstElectronMediumMVA3");
  plotEntryType* plotsElectron_againstElectronTightMVA3  = new plotEntryType("e_againstElectronTightMVA3");
  plotEntryType* plotsElectron_againstElectronVTightMVA3 = new plotEntryType("e_againstElectronVTightMVA3");
  plotEntryType* plotsElectron_againstElectronLooseNewMVA3  = new plotEntryType("e_againstElectronLooseNewMVA3");  
  plotEntryType* plotsElectron_againstElectronMediumNewMVA3 = new plotEntryType("e_againstElectronMediumNewMVA3");
  plotEntryType* plotsElectron_againstElectronTightNewMVA3  = new plotEntryType("e_againstElectronTightNewMVA3");
  plotEntryType* plotsElectron_againstElectronVTightNewMVA3 = new plotEntryType("e_againstElectronVTightNewMVA3");

  int numEntries = tree->GetEntries();
  for ( int iEntry = 0; iEntry < numEntries && (iEntry < maxEvents || maxEvents == -1); ++iEntry ) {
    if ( iEntry > 0 && (iEntry % 1000) == 0 ) {
      std::cout << "processing Event " << iEntry << std::endl;
    }

    tree->GetEntry(iEntry);

    TLorentzVector recTauP4(recTauPx, recTauPy, recTauPz, recTauEn);
    Float_t recTauPt  = recTauP4.Pt();
    Float_t recTauEta = ( recTauPt > 1.-3 ) ? recTauP4.Eta() : 9.9;
    Float_t recTauPhi = recTauP4.Phi();
    

    TLorentzVector leadPFCandP4(leadPFCandPx, leadPFCandPy, leadPFCandPz, leadPFCandEn);
    TLorentzVector leadPFChargedHadrCandP4(leadPFChargedHadrCandPx, leadPFChargedHadrCandPy, leadPFChargedHadrCandPz, leadPFChargedHadrCandEn);

    TLorentzVector genTauP4(genTauPx, genTauPy, genTauPz, genTauEn);
    Float_t genTauPt  = genTauP4.Pt();
    Float_t genTauEta = ( genTauPt > 1.-3 ) ? genTauP4.Eta() : 9.9;
    Float_t genTauPhi = genTauP4.Phi();

    TLorentzVector genElectronP4(genElectronPx, genElectronPy, genElectronPz, genElectronEn);
    TLorentzVector genMuonP4(genMuonPx, genMuonPy, genMuonPz, genMuonEn);

//     bool againstElectronHCP = (againstElectronMVA > 0.5 && againstElectronTightMVA2 > 0.5);
//     bool againstElectronMVAMediumMVA3 = (againstElectronMVA > 0.5 && againstElectronMediumMVA3 > 0.5);
//     bool InEcalCrack = isInEcalCrack(leadPFChargedHadrCandP4.Eta());
//     bool againstElectronMediumMVA3DeadECAL = ( againstElectronMediumMVA3 > 0.5 && againstElectronDeadECAL > 0.5);
//     bool againstElectronTightMVA3DeadECAL = ( againstElectronTightMVA3 > 0.5 && againstElectronDeadECAL > 0.5);

//     evtWeight_dummy = 1.;
    evtWeight_dummy = evtWeight;
    
    if ( recTauPt > 20. && 
	 TMath::Abs(recTauEta) < 2.3 && 
	 decayModeFinding > 0.5 && 
// 	 ElectronVetoMatch<0.5 &&
	 byLooseCombinedIsolationDeltaBetaCorr3Hits > 0.5 
	  ) {
      if ( genTauMatch > 0.5 && genTauDeltaR < 0.3 && 
	   (genTauDecayMode ==  0 || 
	    genTauDecayMode ==  1 || 
	    genTauDecayMode ==  2 || 
	    genTauDecayMode == 10) ) {
	plotsTau_againstMuonLoose->fillHistograms(
          againstMuonLoose > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsTau_againstMuonMedium->fillHistograms(
          againstMuonMedium > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstMuonTight->fillHistograms(
          againstMuonTight > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsTau_againstElectronLoose->fillHistograms(
          againstElectronLoose > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsTau_againstElectronMedium->fillHistograms(
          againstElectronMedium > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstElectronTight->fillHistograms(
          againstElectronTight > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsTau_againstElectronLooseMVA3->fillHistograms(
          againstElectronLooseMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstElectronMediumMVA3->fillHistograms(
          againstElectronMediumMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstElectronTightMVA3->fillHistograms(
          againstElectronTightMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstElectronVTightMVA3->fillHistograms(
          againstElectronVTightMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsTau_againstElectronLooseNewMVA3->fillHistograms(
          againstElectronLooseNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstElectronMediumNewMVA3->fillHistograms(
          againstElectronMediumNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstElectronTightNewMVA3->fillHistograms(
          againstElectronTightNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsTau_againstElectronVTightNewMVA3->fillHistograms(
          againstElectronVTightNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);


      }
      if ( genElectronMatch > 0.5 && genElectronDeltaR < 0.3  ) {
	plotsElectron_againstElectronLoose->fillHistograms(
          againstElectronLoose > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsElectron_againstElectronMedium->fillHistograms(
          againstElectronMedium > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronTight->fillHistograms(
          againstElectronTight > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronLooseMVA3->fillHistograms(
          againstElectronLooseMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronMediumMVA3->fillHistograms(
          againstElectronMediumMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronTightMVA3->fillHistograms(
          againstElectronTightMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronVTightMVA3->fillHistograms(
          againstElectronVTightMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsElectron_againstElectronLooseNewMVA3->fillHistograms(
          againstElectronLooseNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronMediumNewMVA3->fillHistograms(
          againstElectronMediumNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronTightNewMVA3->fillHistograms(
          againstElectronTightNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
        plotsElectron_againstElectronVTightNewMVA3->fillHistograms(
          againstElectronVTightNewMVA3 > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	
      }
      if ( genMuonMatch > 0.5 && genMuonDeltaR < 0.3  ) {
	plotsMuon_againstMuonLoose->fillHistograms(
	  againstMuonLoose > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsMuon_againstMuonMedium->fillHistograms(
	  againstMuonMedium > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
	plotsMuon_againstMuonTight->fillHistograms(
          againstMuonTight > 0.5, true, recTauPt, recTauEta, recTauPhi, numVertices, evtWeight_dummy);
      }
    }

    if ( genTauPt > 15. && TMath::Abs(genTauEta) < 2.3 &&
// 	 ElectronVetoMatch<0.5 &&
	 (genTauDecayMode ==  0 || 
	  genTauDecayMode ==  1 || 
	  genTauDecayMode ==  2 || 
	  genTauDecayMode == 10) ) {

      bool recTauPreselection_passed = 
        (genTauMatch > 0.5 && genTauDeltaR < 0.3 && 
	 recTauPt > 15. && 
	 TMath::Abs(recTauEta) < 2.3 && 
	 decayModeFinding > 0.5);

      plotsTau_byLooseCombinedIsolation->fillHistograms(
        recTauPreselection_passed && byLooseCombinedIsolationDeltaBetaCorr > 0.5, 
        true, genTauPt, genTauEta, genTauPhi, numVertices, evtWeight_dummy);
      plotsTau_byMediumCombinedIsolation->fillHistograms(
        recTauPreselection_passed && byMediumCombinedIsolationDeltaBetaCorr > 0.5, 
        true, genTauPt, genTauEta, genTauPhi, numVertices, evtWeight_dummy);
      plotsTau_byTightCombinedIsolation->fillHistograms(
        recTauPreselection_passed && byTightCombinedIsolationDeltaBetaCorr > 0.5, 
        true, genTauPt, genTauEta, genTauPhi, numVertices, evtWeight_dummy);
      plotsTau_byLooseIsolationMVA->fillHistograms(
        recTauPreselection_passed && byLooseIsolationMVA > 0.5, 
        true, genTauPt, genTauEta, genTauPhi, numVertices, evtWeight_dummy);
      plotsTau_byMediumIsolationMVA->fillHistograms(
        recTauPreselection_passed && byMediumIsolationMVA > 0.5, 
        true, genTauPt, genTauEta, genTauPhi, numVertices, evtWeight_dummy);
      plotsTau_byTightIsolationMVA->fillHistograms(
        recTauPreselection_passed && byTightIsolationMVA > 0.5, 
        true, genTauPt, genTauEta, genTauPhi, numVertices, evtWeight_dummy);
    }
  }

  plotsTau_againstMuonLoose->makeGraphs();
  plotsTau_againstMuonMedium->makeGraphs();
  plotsTau_againstMuonTight->makeGraphs();

  plotsTau_againstElectronLoose->makeGraphs();
  plotsTau_againstElectronMedium->makeGraphs();
  plotsTau_againstElectronTight->makeGraphs(); 
  plotsTau_againstElectronLooseMVA3->makeGraphs();
  plotsTau_againstElectronMediumMVA3->makeGraphs();
  plotsTau_againstElectronTightMVA3->makeGraphs();
  plotsTau_againstElectronVTightMVA3->makeGraphs();
  plotsTau_againstElectronLooseNewMVA3->makeGraphs();
  plotsTau_againstElectronMediumNewMVA3->makeGraphs();
  plotsTau_againstElectronTightNewMVA3->makeGraphs();
  plotsTau_againstElectronVTightNewMVA3->makeGraphs();


  plotsTau_byLooseCombinedIsolation->makeGraphs();
  plotsTau_byMediumCombinedIsolation->makeGraphs();
  plotsTau_byTightCombinedIsolation->makeGraphs();
  plotsTau_byLooseIsolationMVA->makeGraphs();
  plotsTau_byMediumIsolationMVA->makeGraphs();
  plotsTau_byTightIsolationMVA->makeGraphs();

  plotsElectron_againstElectronLoose->makeGraphs();
  plotsElectron_againstElectronMedium->makeGraphs();
  plotsElectron_againstElectronTight->makeGraphs();
  plotsElectron_againstElectronLooseMVA3->makeGraphs();
  plotsElectron_againstElectronMediumMVA3->makeGraphs();
  plotsElectron_againstElectronTightMVA3->makeGraphs();
  plotsElectron_againstElectronVTightMVA3->makeGraphs();
  plotsElectron_againstElectronLooseNewMVA3->makeGraphs();
  plotsElectron_againstElectronMediumNewMVA3->makeGraphs();
  plotsElectron_againstElectronTightNewMVA3->makeGraphs();
  plotsElectron_againstElectronVTightNewMVA3->makeGraphs();

  plotsMuon_againstMuonLoose->makeGraphs();
  plotsMuon_againstMuonMedium->makeGraphs();
  plotsMuon_againstMuonTight->makeGraphs();

//   showGraphs(800, 600,
// 	     plotsTau_againstMuonLoose,  "againstMuonLoose",
// 	     plotsTau_againstMuonMedium, "againstMuonMedium",
// 	     plotsTau_againstMuonTight,  "againstMuonTight",
// 	     0,    "",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow #tau#tau", 0.055, 
// // 	     "#tau", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     false, 0.95, 1.05, "Efficiency", 1.2,
// 	     "makeTauIdEffPlots2_Taus_muon.eps");

  showGraphs(800, 600,
	     plotsTau_againstElectronLoose,  "againstElectronLoose",
	     plotsTau_againstElectronMedium, "againstElectronMedium",
	     plotsTau_againstElectronTight,  "againstElectronTight",
	     0,"",
	     0.045, 0.18, 0.72, 0.28, 0.16,
	     "Z #rightarrow #tau#tau", 0.055, 
// 	     "#tau", 0.055, 
	     0.74, 0.16, 0.15, 0.06,
	     false, 0., 1.5, "Efficiency", 1.2,
	     "makeTauIdEffPlots2_Taus_cut.eps");


  showGraphs(800, 600,
	     plotsTau_againstElectronLooseMVA3,  "againstElectronLooseMVA3",
	     plotsTau_againstElectronMediumMVA3, "againstElectronMediumMVA3",
	     plotsTau_againstElectronTightMVA3,  "againstElectronTightMVA3",
	     plotsTau_againstElectronVTightMVA3,  "againstElectronVTightMVA3",
	     0.045, 0.18, 0.72, 0.28, 0.16,
	     "Z #rightarrow #tau#tau", 0.055, 
// 	     "#tau", 0.055, 
	     0.74, 0.16, 0.15, 0.06,
	     false, 0., 1.5, "Efficiency", 1.2,
	     "makeTauIdEffPlots2_Taus_mva3.eps");

  showGraphs(800, 600,
	     plotsTau_againstElectronLooseNewMVA3,  "againstElectronLooseMVA4",
	     plotsTau_againstElectronMediumNewMVA3, "againstElectronMediumMVA4",
	     plotsTau_againstElectronTightNewMVA3,  "againstElectronTightMVA4",
	     plotsTau_againstElectronVTightNewMVA3,  "againstElectronVTightMVA4",
	     0.045, 0.18, 0.72, 0.28, 0.16,
	     "Z #rightarrow #tau#tau", 0.055, 
// 	     "#tau", 0.055, 
	     0.74, 0.16, 0.15, 0.06,
	     false, 0., 1.5, "Efficiency", 1.2,
	     "makeTauIdEffPlots2_Taus_mva4.eps");

//   showGraphs(800, 600,
// 	     plotsTau_againstElectronTightMVA3,    "new MVA Tight",
// 	     plotsTau_againstElectronMVA,          "old MVA Tight (ICHEP '12)",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow #tau#tau", 0.055, 
// 	     "#tau", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     false, 0., 1.5, "Efficiency", 1.2,
// 	     "makeTauIdEffPlots2_Taus_OldMVAvsNewMVATight.eps");

//   showGraphs(800, 600,
// 	     plotsTau_againstElectronVTightMVA3,    "new MVA VTight",
// 	     plotsTau_againstElectronMVA,          "old MVA Tight (ICHEP '12)",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow #tau#tau", 0.055, 
// 	     "#tau", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     false, 0., 1.5, "Efficiency", 1.2,
// 	     "makeTauIdEffPlots2_Taus_OldMVAvsNewMVAVTight.eps");

//   showGraphs(800, 600,
// 	     plotsTau_againstElectronMediumMVA3,    "new MVA Medium",
// 	     plotsTau_againstElectronMVA,          "old MVA Tight (ICHEP '12)",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow #tau#tau", 0.055, 
// 	     "#tau", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     false, 0., 1.5, "Efficiency", 1.2,
// 	     "makeTauIdEffPlots2_Taus_OldMVAvsNewMVAMedium.eps");



// // //   showGraphs(800, 600,
// // // 	     //plotsTau_byLooseCombinedIsolation,  "byLooseCombinedIsolation",
// // // 	     //plotsTau_byMediumCombinedIsolation, "byMediumCombinedIsolation",
// // // 	     //plotsTau_byTightCombinedIsolation,  "byTightCombinedIsolation",
// // // 	     plotsTau_byLooseCombinedIsolation,  "HPS #Delta#beta Isolation Loose",
// // // 	     plotsTau_byMediumCombinedIsolation, "HPS #Delta#beta Isolation Medium",
// // // 	     plotsTau_byTightCombinedIsolation,  "HPS #Delta#beta Isolation Tight",
// // // 	     0, "",
// // // 	     0.045, 0.18, 0.72, 0.28, 0.16,
// // // 	     "Z #rightarrow #tau#tau", 0.055, 
// // // 	     0.74, 0.16, 0.15, 0.06,
// // // 	     false, 0., 1.5, "Efficiency", 1.2,
// // // 	     "makeTauIdEffPlots2_Taus_cutIso.eps");
// // //   showGraphs(800, 600,
// // // 	     //plotsTau_byLooseIsolationMVA,  "byLooseIsolationMVA",
// // // 	     //plotsTau_byMediumIsolationMVA, "byMediumIsolationMVA",
// // // 	     //plotsTau_byTightIsolationMVA,  "byTightIsolationMVA",
// // // 	     plotsTau_byLooseIsolationMVA,  "MVA Isolation Loose",
// // // 	     plotsTau_byMediumIsolationMVA, "MVA Isolation Medium",
// // // 	     plotsTau_byTightIsolationMVA,  "MVA Isolation Tight",
// // // 	     0, "",
// // // 	     0.045, 0.18, 0.72, 0.28, 0.16,
// // // 	     "Z #rightarrow #tau#tau", 0.055, 
// // // 	     0.74, 0.16, 0.15, 0.06,
// // // 	     false, 0., 1.5, "Efficiency", 1.2,
// // // 	     "makeTauIdEffPlots2_Taus_mvaIso.eps");

//   showGraphs(800, 600,
// 	     plotsMuon_againstMuonLoose,  "againstMuonLoose",
// 	     plotsMuon_againstMuonMedium, "againstMuonMedium",
// 	     plotsMuon_againstMuonTight,  "againstMuonTight",
// 	     0,    "",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow #mu#mu", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-5, 1.e-1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Muon_muon.eps");

  showGraphs(800, 600,
	     plotsElectron_againstElectronLoose,  "againstElectronLoose",
	     plotsElectron_againstElectronMedium, "againstElectronMedium",
	     plotsElectron_againstElectronTight,  "againstElectronTight",
	     0,    "",
	     0.045, 0.18, 0.72, 0.28, 0.16,
	     "Z #rightarrow ee", 0.055, 
// 	     "e", 0.055, 
	     0.74, 0.16, 0.15, 0.06,
	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
	     "makeTauIdEffPlots2_Electron_cut.eps");

  showGraphs(800, 600,
	     plotsElectron_againstElectronLooseMVA3,  "againstElectronLooseMVA3",
	     plotsElectron_againstElectronMediumMVA3, "againstElectronMediumMVA3",
	     plotsElectron_againstElectronTightMVA3,  "againstElectronTightMVA3",
	     plotsElectron_againstElectronVTightMVA3,  "againstElectronVTightMVA3",
	     0.045, 0.18, 0.72, 0.28, 0.16,
	     "Z #rightarrow ee", 0.055, 
// 	     "e", 0.055, 
	     0.74, 0.16, 0.15, 0.06,
	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
	     "makeTauIdEffPlots2_Electron_mva3.eps");

  showGraphs(800, 600,
	     plotsElectron_againstElectronLooseNewMVA3,  "againstElectronLooseMVA4",
	     plotsElectron_againstElectronMediumNewMVA3, "againstElectronMediumMVA4",
	     plotsElectron_againstElectronTightNewMVA3,  "againstElectronTightMVA4",
	     plotsElectron_againstElectronVTightNewMVA3,  "againstElectronVTightMVA4",
	     0.045, 0.18, 0.72, 0.28, 0.16,
	     "Z #rightarrow ee", 0.055, 
// 	     "e", 0.055, 
	     0.74, 0.16, 0.15, 0.06,
	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
	     "makeTauIdEffPlots2_Electron_mva4.eps");
//   showGraphs(800, 600,
// 	     plotsElectron_againstElectronLooseMVA3,    "againstElectronLooseMVA3",
// 	     plotsElectron_againstElectronHCP,          "againstElectronHCP",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow ee", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Electron_HCP_1.eps");

//   showGraphs(800, 600,
// 	     plotsElectron_againstElectronMediumMVA3,    "againstElectronMediumMVA3",
// 	     plotsElectron_againstElectronHCP,          "againstElectronHCP",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow ee", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Electron_HCP_2.eps");

//   showGraphs(800, 600,
// 	     plotsElectron_againstElectronTightMVA3,    "againstElectronTightMVA3",
// 	     plotsElectron_againstElectronHCP,          "againstElectronHCP",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow ee", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-4, 1.e+1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Electron_HCP_3.eps");

//   showGraphs(800, 600,
// 	     plotsElectron_againstElectronTightMVA3,    "new MVA Tight",
// 	     plotsElectron_againstElectronMVA,          "old MVA Tight (ICHEP'12)",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow ee", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Electron_OldMVAvsNewMVA.eps");

//   showGraphs(800, 600,
// 	     plotsElectron_againstElectronVTightMVA3,   "new MVA VTight",
// 	     plotsElectron_againstElectronMVA,          "old MVA Tight (ICHEP'12)",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow ee", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Electron_OldMVAvsNewMVAVTight.eps");

//   showGraphs(800, 600,
// 	     plotsElectron_againstElectronMediumMVA3,   "new MVA Medium",
// 	     plotsElectron_againstElectronMVA,          "old MVA Tight (ICHEP'12)",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow ee", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-3, 1.e+1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Electron_OldMVAvsNewMVAMedium.eps");

//   showGraphs(800, 600,
// 	     plotsElectron_againstElectronVTightMVA3,    "againstElectronVTightMVA3",
// 	     plotsElectron_againstElectronHCP,          "againstElectronHCP",
// 	     0,"",
// 	     0,"",
// 	     0.045, 0.18, 0.72, 0.28, 0.16,
// 	     "Z #rightarrow ee", 0.055, 
// // 	     "e", 0.055, 
// 	     0.74, 0.16, 0.15, 0.06,
// 	     true, 1.e-4, 1.e+1, "Fake-rate", 1.2,
// 	     "makeTauIdEffPlots2_Electron_HCP_4.eps");




  // save additional histograms
  TString outputFileName = "makeTauIdEffPlots2_histograms.root";
  TFile* outputFile = new TFile(outputFileName.Data(), "RECREATE");
  delete outputFile;

//   delete inputFile;
}



